# Sentiment Analysis & Tone Rewriting Assistant

## 1. Overview: The Challenge of Online Tone

Interpreting the intended tone and underlying sentiment in written text online (emails, chats, social media) can be incredibly difficult. Nuance, sarcasm, and cultural differences often get lost, leading to misunderstandings and miscommunication.

This challenge can be particularly pronounced for individuals who generally find interpreting social or emotional cues more difficult, including those with neurodevelopmental conditions like Autism Spectrum Condition, learning disabilities, or other social communication difficulties. The lack of non-verbal cues (like facial expressions or voice tone) in text makes accurate interpretation a common struggle.

This project provides a tool designed to help bridge that gap by offering insights into the sentiment and emotional tone of selected text, alongside AI-generated alternative phrasings.

## 2. Solution Components

The system consists of two main parts working together:

1.  **Chrome Extension**: Provides the user interface within the browser, handling text selection from webpages and displaying results.
2.  **Python Agent API Server**: A local backend service that runs on your computer to perform the analysis and rewriting using AI models, ensuring privacy.

## 3. Features

* **Easy Text Selection:** Analyze any text on the web via the right-click context menu ("Analyze Sentiment (Agent)").
* **Sentiment Analysis:** View detailed scores for Positive, Neutral, and Negative sentiment.
* **Emotional Tone Breakdown:** See potential underlying emotions (Joy, Sadness, Anger, Fear, Trust, Disgust, Surprise, Anticipation) based on the NRC Emotion Lexicon.
* **Advanced AI Rewrites:** Get alternative phrasings of the selected text with more explicitly **Positive** or **Neutral** tones, generated by a powerful local Large Language Model (LLM via Ollama) that considers the initial analysis.
* **Clear Visualization:** Results are presented in an easy-to-understand popup interface within the browser extension.
* **Local Processing:** Core analysis and rewriting happen locally, enhancing user privacy.

## 4. Target Audience

This tool is designed to help:

* Anyone who occasionally struggles to interpret the intended tone of online communication.
* Individuals seeking assistance in understanding the potential emotional subtext of messages they receive or write.
* Users who want help crafting or revising messages to convey a specific, desired tone (e.g., ensuring a message sounds neutral or appropriately positive).
* **People with neurodevelopmental conditions, learning disabilities, or social communication difficulties** who may benefit from more explicit, tool-assisted analysis of sentiment and emotion in text.
* Developers interested in practical applications of local LLMs, NLP analysis, and agent-based systems.

## 5. How It Works

1.  The Chrome extension captures selected text when you right-click.
2.  The text is sent to the local Python Agent API server running on your machine.
3.  The server performs sentiment analysis using a pre-trained RoBERTa model and emotion analysis using the NRC Emotion Lexicon.
4.  The server constructs prompts based on the analysis and sends them to your locally running Ollama instance (with the Llama 3 model).
5.  Ollama generates the positive and neutral rewrites.
6.  The complete results (analysis + rewrites) are sent back to the extension.
7.  The extension displays the results in the popup window.

## 6. Requirements

### For the Python Agent API Server

* Python 3.6+
* Flask and Flask-CORS (Python libraries)
* Transformers (from Hugging Face) (Python library)
* PyTorch or TensorFlow (as backend for Transformers)
* NLTK and NRCLex (for emotion analysis) (Python libraries)
* Requests (for API calls to Ollama) (Python library)
* **Ollama installed and running locally** (Download from [ollama.com](https://ollama.com/))
* **Llama 3 model installed in Ollama** (e.g., `llama3:latest`)

### For the Chrome Extension

* Google Chrome browser (or compatible Chromium-based browser)
* Developer mode enabled in browser extensions for installation

## 7. Installation & Setup

### Step 1: Python Server Setup

1.  **Install Ollama:** Download and install Ollama from [ollama.com](https://ollama.com/). Ensure it is running (check system tray icon on Windows/macOS).
2.  **Download LLM Model:** Open your terminal or command prompt and pull the required model:
   ```bash
   ollama pull llama3
   ```
   *(Verify the exact name using `ollama list`, e.g., `llama3:latest`)*
3.  **Install Python Dependencies:** Navigate to the directory containing the `agent_api_server.py` file in your terminal and run:
   ```bash
   pip install Flask Flask-CORS transformers torch nrclex nltk requests
   ```
   *(Replace `torch` with `tensorflow` if needed for your system)*
4.  **Confirm Model Name in Script:** Open `agent_api_server.py` and ensure the `model_name` default value in the `_call_ollama_llm` function matches the name shown by `ollama list` (e.g., `"llama3:latest"`).
5.  **Run the API Server:** In the same terminal, start the server:
   ```bash
   python agent_api_server.py
   ```
   *(The server should start on `http://127.0.0.1:5001`. Keep this terminal running.)*

### Step 2: Chrome Extension Setup

1.  Ensure all extension files (`manifest.json`, `background.js`, `popup.js`, `popup.html`, `content.js`) are together in a single folder (e.g., `sentiment_extension`).
2.  Open Chrome and navigate to `chrome://extensions/`.
3.  Enable **"Developer mode"** (usually a toggle switch in the top-right).
4.  Click **"Load unpacked"**.
5.  Select the folder containing the extension files (e.g., `sentiment_extension`).
6.  The extension icon should appear in your browser toolbar.

## 8. Usage

1.  Make sure the Python Agent API server is running (from Step 1.5).
2.  Make sure Ollama is running in the background.
3.  Browse to any webpage with text.
4.  Select/highlight the text you want to analyze.
5.  Right-click on the selected text.
6.  Choose **"Analyze Sentiment (Agent)"** from the context menu.
7.  Click the extension's icon in the browser toolbar.
8.  The popup will appear showing the original text, sentiment scores, emotion breakdown, and the AI-generated positive/neutral rewrites. *(Note: LLM generation can take a few seconds)*.

## 9. Troubleshooting

* **"ERR" badge on extension icon / Popup shows error:** Check the browser's extension console *and* the terminal window running `agent_api_server.py` for specific error messages.
* **Connection Errors:** Ensure the Python server is running on port 5001. Ensure Ollama is running. Check if `manifest.json` `host_permissions` includes `http://127.0.0.1:5001/*`.
* **Ollama Errors (e.g., "model not found", "connection refused"):** Verify Ollama is running (`ollama list` in terminal). Ensure the model name in `agent_api_server.py` exactly matches the output of `ollama list`.
* **Slow Rewrites:** LLM generation takes time, especially on less powerful hardware. Wait a few seconds after clicking the icon.
* **First Run Downloads:** The very first run of the server might download the sentiment model (~500MB) and NLTK data. Ensure internet connectivity.

## 10. Note on Dependencies & Size

* The Python server requires several machine learning models:
   * The `transformers` sentiment model (~500MB).
   * NLTK data (~10-100MB depending on what's already installed).
   * The Ollama `llama3` model (~4.7 GB).
* Ensure you have sufficient disk space (~6 GB free recommended) and a stable internet connection for the initial setup and downloads.

## 11. License

MIT License

Copyright (c) 2025 Brian Kobylarz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.